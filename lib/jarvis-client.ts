/**
 * ü§ñ DRIVER AI CLIENT - JARVIS INTEGRATION
 * Cliente inteligente conectado al estado global de Astroflora
 * Patr√≥n: Comando ‚Üí API ‚Üí Chat ‚Üí Estado Global ‚Üí Componente Visual
 */

import { useAstrofloraStore } from './astroflora-store';

export interface DriverAICommand {
  type: 'LOAD_PDB' | 'SET_SEQUENCE' | 'SET_VIEWER_MODE' | 'LOAD_PCA_DATA' | 'START_EXPERIMENT' | 'ADD_PROTOCOL_STEP';
  payload: any;
  metadata?: {
    confidence: number;
    source: string;
    timestamp: string;
  };
}

export interface DriverAIResponse {
  message: string;
  confidence: number;
  commands?: DriverAICommand[];
  data?: any;
  suggestions?: string[];
}

export class DriverAIClientJarvis {
  private baseUrl: string;
  private timeout: number;
  private store: any;

  constructor() {
    this.baseUrl = '/api/driver-ai';
    this.timeout = 30000;
    
    console.log('ü§ñ Jarvis Driver AI Client initialized:', {
      baseUrl: this.baseUrl,
      features: ['command-execution', 'state-integration', 'intelligent-routing'],
      architecture: 'Command ‚Üí API ‚Üí Chat ‚Üí Estado Global ‚Üí Componente Visual'
    });
  }

  /**
   * üîç DETECCI√ìN INTELIGENTE DE TIPO DE CONSULTA
   */
  private detectQueryType(input: string): string {
    const cleanInput = input.replace(/\s+/g, '').toUpperCase();
    
    // Detectar secuencias de prote√≠nas (amino√°cidos)
    const aminoAcids = 'ACDEFGHIKLMNPQRSTVWY';
    const aminoAcidPattern = new RegExp(`^[${aminoAcids}]{10,}$`);
    
    if (aminoAcidPattern.test(cleanInput)) {
      console.log('üß¨ Detected: PROTEIN_ANALYSIS');
      return 'PROTEIN_ANALYSIS';
    }
    
    // Detectar consultas sobre estructuras PDB
    if (/\b(pdb|protein data bank|structure|1[0-9a-z]{3})\b/i.test(input)) {
      console.log('üèóÔ∏è Detected: STRUCTURE_QUERY');
      return 'STRUCTURE_QUERY';
    }
    
    // Detectar consultas sobre protocolos
    if (/\b(pcr|protocol|experiment|assay|method)\b/i.test(input)) {
      console.log('üß™ Detected: PROTOCOL_QUERY');
      return 'PROTOCOL_QUERY';
    }
    
    // Por defecto: conversacional
    console.log('üí¨ Detected: CONVERSATIONAL');
    return 'CONVERSATIONAL';
  }

  /**
   * üß† DETECCI√ìN INTELIGENTE DE COMANDOS
   * Analiza la respuesta del Driver AI para extraer comandos accionables
   */
  private extractCommands(aiResponse: any): DriverAICommand[] {
    const commands: DriverAICommand[] = [];
    
    // Extraer comandos de la respuesta del AI
    if (aiResponse.analysis_id && aiResponse.results) {
      // Es un an√°lisis de prote√≠na - comandos autom√°ticos
      if (aiResponse.input_sequence) {
        commands.push({
          type: 'SET_SEQUENCE',
          payload: aiResponse.input_sequence,
          metadata: {
            confidence: aiResponse.metadata?.confidence_score || 0.9,
            source: 'protein_analysis',
            timestamp: new Date().toISOString()
          }
        });
      }
      
      // Si hay recomendaciones de estructura, cargar PDB
      if (aiResponse.results.structural_prediction) {
        // Aqu√≠ podr√≠as mapear predicciones a PDB IDs conocidos
        const suggestedPDB = this.mapStructureToPDB(aiResponse.results);
        if (suggestedPDB) {
          commands.push({
            type: 'LOAD_PDB',
            payload: suggestedPDB,
            metadata: {
              confidence: 0.8,
              source: 'structure_prediction',
              timestamp: new Date().toISOString()
            }
          });
        }
      }
    }
    
    // Detectar comandos en texto de respuesta
    const responseText = aiResponse.message || '';
    commands.push(...this.parseTextCommands(responseText));
    
    return commands;
  }

  /**
   * üéØ MAPEO DE ESTRUCTURA A PDB
   */
  private mapStructureToPDB(results: any): string | null {
    // L√≥gica para mapear caracter√≠sticas estructurales a PDB IDs
    const proteinLength = results.sequence_info?.length;
    
    if (proteinLength && proteinLength < 100) {
      return '1CRN'; // Crambin - prote√≠na peque√±a ejemplo
    } else if (proteinLength && proteinLength > 300) {
      return '1HHO'; // Hemoglobina - prote√≠na grande ejemplo
    }
    
    return null;
  }

  /**
   * üìù PARSER DE COMANDOS EN TEXTO
   */
  private parseTextCommands(text: string): DriverAICommand[] {
    const commands: DriverAICommand[] = [];
    const lowerText = text.toLowerCase();
    
    // Detectar menciones de PDB IDs
    const pdbMatch = text.match(/(?:pdb|structure)\s*:?\s*([1-9][a-zA-Z0-9]{3})/i);
    if (pdbMatch) {
      commands.push({
        type: 'LOAD_PDB',
        payload: pdbMatch[1].toUpperCase(),
        metadata: {
          confidence: 0.9,
          source: 'text_parsing',
          timestamp: new Date().toISOString()
        }
      });
    }
    
    // Detectar cambios de modo de visualizaci√≥n
    if (lowerText.includes('cartoon') || lowerText.includes('ribbon')) {
      commands.push({
        type: 'SET_VIEWER_MODE',
        payload: 'cartoon',
        metadata: { confidence: 0.8, source: 'text_parsing', timestamp: new Date().toISOString() }
      });
    } else if (lowerText.includes('surface')) {
      commands.push({
        type: 'SET_VIEWER_MODE',
        payload: 'surface',
        metadata: { confidence: 0.8, source: 'text_parsing', timestamp: new Date().toISOString() }
      });
    }
    
    return commands;
  }

  /**
   * üéØ EJECUTOR DE COMANDOS
   * Conecta con el estado global para ejecutar comandos
   */
  private executeCommands(commands: DriverAICommand[]): void {
    if (commands.length === 0) return;
    
    console.log('üéØ Jarvis: Executing', commands.length, 'commands');
    
    // Obtener acceso al store global
    const store = useAstrofloraStore.getState();
    
    commands.forEach((command, index) => {
      setTimeout(() => {
        console.log(`üéØ Executing command ${index + 1}:`, command);
        
        // Marcar como procesando
        store.setProcessingCommand(true);
        
        // Ejecutar comando a trav√©s del estado global
        store.executeDriverCommand(command);
        
        // Marcar como completado
        setTimeout(() => {
          store.setProcessingCommand(false);
        }, 1000);
        
      }, index * 500); // Espaciar comandos para mejor UX
    });
  }

  /**
   * üß¨ AN√ÅLISIS INTELIGENTE DE PROTE√çNAS
   */
  async analyzeProtein(sequence: string): Promise<DriverAIResponse> {
    try {
      console.log('üß¨ Jarvis: Analyzing protein sequence...');
      
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Client': 'Jarvis-Driver-AI'
        },
        body: JSON.stringify({
          sequence: sequence.replace(/[\s\n>]/g, ''),
          analysis_type: 'blast'
        })
      });

      if (!response.ok) {
        throw new Error(`Analysis failed: ${response.status}`);
      }

      const data = await response.json();
      
      // Extraer comandos de la respuesta
      const commands = this.extractCommands(data);
      
      // Ejecutar comandos autom√°ticamente
      this.executeCommands(commands);
      
      // Formatear respuesta para el chat
      const formattedMessage = this.formatProteinAnalysis(data);
      
      return {
        message: formattedMessage,
        confidence: data.metadata?.confidence_score || 0.9,
        commands,
        data,
        suggestions: data.results?.recommendations || []
      };
      
    } catch (error) {
      console.error('üö® Jarvis: Protein analysis failed:', error);
      throw error;
    }
  }

  /**
   * üí¨ CHAT CONVERSACIONAL INTELIGENTE
   */
  async chatConversational(message: string): Promise<DriverAIResponse> {
    try {
      console.log('üí¨ Jarvis: Processing conversational message...');
      
      // Simular respuesta inteligente basada en el mensaje
      const response = await this.generateIntelligentResponse(message);
      
      // Extraer comandos potenciales
      const commands = this.parseTextCommands(response.message);
      
      // Ejecutar comandos si los hay
      this.executeCommands(commands);
      
      return response;
      
    } catch (error) {
      console.error('üö® Jarvis: Conversational chat failed:', error);
      throw error;
    }
  }

  /**
   * üß† GENERADOR DE RESPUESTAS INTELIGENTES
   */
  private async generateIntelligentResponse(message: string): Promise<DriverAIResponse> {
    const lowerMessage = message.toLowerCase();
    
    // Respuestas espec√≠ficas por tipo de consulta
    if (lowerMessage.includes('conectado') || lowerMessage.includes('backend')) {
      return {
        message: '‚úÖ **Driver AI Conectado y Operativo**\n\nSoy Jarvis, tu asistente cient√≠fico de Astroflora. Estoy completamente conectado al backend Driver AI 7.0.\n\n**Capacidades activas:**\n- üß¨ An√°lisis de secuencias de prote√≠nas\n- üìä Visualizaci√≥n molecular autom√°tica\n- üß™ Asistencia en protocolos experimentales\n- üìà An√°lisis de datos bioinform√°ticos\n\n¬øEn qu√© experimento te puedo ayudar hoy?',
        confidence: 1.0,
        suggestions: [
          'Analizar una secuencia de prote√≠na',
          'Dise√±ar un protocolo de PCR',
          'Cargar una estructura PDB',
          'Crear un experimento nuevo'
        ]
      };
    }
    
    if (lowerMessage.includes('pdb') || lowerMessage.includes('estructura')) {
      const commands: DriverAICommand[] = [
        {
          type: 'LOAD_PDB',
          payload: '1CRN',
          metadata: { confidence: 0.9, source: 'demo', timestamp: new Date().toISOString() }
        }
      ];
      
      return {
        message: 'üß¨ **Cargando Estructura Molecular**\n\nHe cargado la estructura PDB: 1CRN (Crambin) como ejemplo.\n\nPuedes pedirme:\n- Cambiar el modo de visualizaci√≥n (cartoon, surface, ball-stick)\n- Cargar otra estructura espec√≠fica\n- Analizar sitios activos\n- Comparar con otras estructuras',
        confidence: 0.9,
        commands,
        suggestions: [
          'Cambiar a modo surface',
          'Mostrar sitios activos',
          'Cargar hemoglobina (1HHO)',
          'Analizar cavidades'
        ]
      };
    }
    
    if (lowerMessage.includes('pcr') || lowerMessage.includes('protocolo')) {
      return {
        message: 'üß™ **Asistente de Protocolos PCR**\n\nPuedo ayudarte a dise√±ar protocolos de PCR optimizados.\n\n**Informaci√≥n que necesito:**\n- Secuencia objetivo o gen de inter√©s\n- Tama√±o del amplic√≥n deseado\n- Condiciones especiales (GC%, Tm, etc.)\n\n**Protocolos disponibles:**\n- PCR est√°ndar\n- qPCR/RT-PCR\n- PCR de colonia\n- PCR de alta fidelidad',
        confidence: 0.95,
        suggestions: [
          'Dise√±ar primers para gen espec√≠fico',
          'Optimizar condiciones de PCR',
          'Protocolo de qPCR',
          'Troubleshooting PCR'
        ]
      };
    }
    
    // Respuesta por defecto
    return {
      message: `ü§ñ **Jarvis Cient√≠fico Activo**\n\nHe recibido tu mensaje: "${message}"\n\nComo tu asistente cient√≠fico, puedo ayudarte con:\n- üß¨ An√°lisis de secuencias y estructuras\n- üß™ Dise√±o de experimentos\n- üìä Visualizaci√≥n de datos\n- üìà Interpretaci√≥n de resultados\n\n¬øHay alg√∫n an√°lisis espec√≠fico que necesites?`,
      confidence: 0.7,
      suggestions: [
        'Analizar secuencia de prote√≠na',
        'Cargar estructura molecular',
        'Dise√±ar protocolo experimental',
        'Ver experimentos activos'
      ]
    };
  }

  /**
   * üìã FORMATEAR AN√ÅLISIS DE PROTE√çNAS
   */
  private formatProteinAnalysis(data: any): string {
    if (!data.results) return 'An√°lisis completado sin resultados espec√≠ficos.';
    
    const { sequence_info, structural_prediction, recommendations } = data.results;
    
    let message = 'üß¨ **An√°lisis de Prote√≠na Completado**\n\n';
    
    if (sequence_info) {
      message += `**üìä Informaci√≥n de Secuencia:**\n`;
      message += `- Longitud: ${sequence_info.length} amino√°cidos\n`;
      message += `- Peso Molecular: ${sequence_info.molecular_weight_kda} kDa\n`;
      message += `- Punto Isoel√©ctrico: ${sequence_info.isoelectric_point}\n`;
      message += `- Hidrofobicidad: ${sequence_info.hydrophobicity_index}\n\n`;
    }
    
    if (structural_prediction) {
      message += `**üèóÔ∏è Predicci√≥n Estructural:**\n`;
      message += `- Œ±-h√©lice: ${(structural_prediction.alpha_helix_probability * 100).toFixed(1)}%\n`;
      message += `- Œ≤-l√°mina: ${(structural_prediction.beta_sheet_probability * 100).toFixed(1)}%\n`;
      message += `- Bucle: ${(structural_prediction.random_coil_probability * 100).toFixed(1)}%\n\n`;
    }
    
    if (recommendations && recommendations.length > 0) {
      message += `**üéØ Recomendaciones:**\n`;
      recommendations.forEach((rec: string, idx: number) => {
        message += `${idx + 1}. ${rec}\n`;
      });
    }
    
    message += `\n‚ú® *He actualizado autom√°ticamente la visualizaci√≥n molecular*`;
    
    return message;
  }

  /**
   * üéØ M√âTODO UNIVERSAL - PUNTO DE ENTRADA PRINCIPAL
   */
  async process(input: string): Promise<DriverAIResponse> {
    console.log('ü§ñ Jarvis processing input:', input);
    
    try {
      const queryType = this.detectQueryType(input);
      console.log('üîç Query type detected:', queryType);
      
      // Preparar payload para Driver AI
      const payload = {
        query: input,
        context: {
          source: 'jarvis',
          intent: queryType,
          timestamp: new Date().toISOString()
        }
      };
      
      console.log('üì§ Sending to Driver AI:', payload);
      
      // Llamar a Driver AI a trav√©s de la API proxy
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Jarvis-Client/1.0.0'
        },
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        throw new Error(`Driver AI API failed: ${response.status} ${response.statusText}`);
      }
      
      const driverAIResponse = await response.json();
      console.log('üì• Driver AI response:', driverAIResponse);
      
      // Procesar respuesta y extraer comandos
      const commands = this.extractCommands(driverAIResponse);
      console.log('‚ö° Commands extracted:', commands);
      
      // Ejecutar comandos en el estado global
      if (commands.length > 0) {
        await this.executeCommands(commands);
      }
      
      // Formatear respuesta para el chat
      const chatMessage = this.formatChatMessage(driverAIResponse, queryType);
      
      const jarvisResponse: DriverAIResponse = {
        message: chatMessage,
        confidence: driverAIResponse.metadata?.confidence_score || 0.8,
        commands: commands,
        data: driverAIResponse,
        suggestions: driverAIResponse.results?.recommendations || []
      };
      
      console.log('‚úÖ Jarvis response ready:', jarvisResponse);
      return jarvisResponse;
      
    } catch (error) {
      console.error('üö® Jarvis processing error:', error);
      
      // Respuesta de fallback
      return {
        message: `üö® **Error de conexi√≥n con Driver AI**\n\n${error instanceof Error ? error.message : 'Error desconocido'}\n\nVerificando conexi√≥n...`,
        confidence: 0,
        commands: [],
        data: null,
        suggestions: ['Verificar conexi√≥n de red', 'Reintentar en unos momentos']
      };
    }
  }

  /**
   * üìù FORMATEAR MENSAJE DE CHAT DESDE DRIVER AI
   */
  private formatChatMessage(driverAIResponse: any, queryType: string): string {
    const { results, metadata, analysis_id, input_sequence } = driverAIResponse;
    
    if (queryType === 'PROTEIN_ANALYSIS' && results) {
      const info = results.sequence_info;
      const structural = results.structural_prediction;
      const recommendations = results.recommendations || [];
      
      let message = `üß¨ **An√°lisis Completado - Secuencia: ${input_sequence}**\n\n`;
      
      // Informaci√≥n b√°sica
      if (info) {
        message += `üìä **Propiedades B√°sicas:**\n`;
        message += `‚Ä¢ Longitud: ${info.length} amino√°cidos\n`;
        message += `‚Ä¢ Peso molecular: ${info.molecular_weight_kda} kDa\n`;
        message += `‚Ä¢ Punto isoel√©ctrico: ${info.isoelectric_point}\n`;
        message += `‚Ä¢ √çndice de hidrofobicidad: ${info.hydrophobicity_index}\n\n`;
      }
      
      // Predicci√≥n estructural
      if (structural) {
        message += `üèóÔ∏è **Predicci√≥n Estructural:**\n`;
        message += `‚Ä¢ Œ±-h√©lice: ${(structural.alpha_helix_probability * 100).toFixed(1)}%\n`;
        message += `‚Ä¢ Œ≤-hoja: ${(structural.beta_sheet_probability * 100).toFixed(1)}%\n`;
        message += `‚Ä¢ Estructura aleatoria: ${(structural.random_coil_probability * 100).toFixed(1)}%\n\n`;
      }
      
      // Recomendaciones
      if (recommendations.length > 0) {
        message += `üí° **Recomendaciones Experimentales:**\n`;
        recommendations.forEach((rec: string, idx: number) => {
          message += `${idx + 1}. ${rec}\n`;
        });
        message += '\n';
      }
      
      // Confianza y metadata
      if (metadata) {
        message += `üìà **Confianza del an√°lisis:** ${(metadata.confidence_score * 100).toFixed(1)}%\n`;
        message += `‚ö° **Tiempo de procesamiento:** ${metadata.processing_time_seconds}s\n`;
        message += `üî¨ **ID de an√°lisis:** ${analysis_id}`;
      }
      
      return message;
    }
    
    // Para otros tipos de consulta, generar respuesta inteligente
    return this.generateContextualResponse(driverAIResponse, queryType);
  }

  /**
   * üß† RESPUESTA CONTEXTUAL INTELIGENTE
   */
  private generateContextualResponse(driverAIResponse: any, queryType: string): string {
    // Si Driver AI devuelve datos de prote√≠na para una consulta conversacional,
    // adaptamos la respuesta
    if (driverAIResponse.results && queryType === 'CONVERSATIONAL') {
      return `ü§ñ **Jarvis Responde:**\n\nHe procesado tu consulta utilizando mi motor de an√°lisis de prote√≠nas. Aunque tu pregunta no era espec√≠ficamente sobre una secuencia, he detectado que Driver AI ha procesado informaci√≥n biol√≥gica relevante.\n\n¬øTe gustar√≠a que analice alguna secuencia espec√≠fica o prefieres que te ayude con otro tipo de consulta cient√≠fica?`;
    }
    
    // Respuesta por defecto
    return `ü§ñ **Jarvis Conectado**\n\nHe recibido tu consulta y estoy procesando la informaci√≥n a trav√©s de Driver AI 7.0.\n\n**Estado:** ‚úÖ Conectado y operativo\n**Motor:** Driver AI v7.0\n**Capacidades:** An√°lisis de prote√≠nas, visualizaci√≥n molecular, protocolos experimentales\n\n¬øEn qu√© puedo ayudarte espec√≠ficamente?`;
  }

  /**
   * üè• HEALTH CHECK
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Jarvis-HealthCheck/1.0.0'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Driver AI Health:', data);
        return data.status === 'healthy';
      }
      
      return false;
    } catch (error) {
      console.error('üö® Jarvis health check failed:', error);
      return false;
    }
  }
}

// üéØ INSTANCIA SINGLETON
export const jarvisClient = new DriverAIClientJarvis();
